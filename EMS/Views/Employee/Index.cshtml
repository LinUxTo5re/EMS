@model EmployeeBusinessLayer.Models.EmployeeDetails

<h2 class="d-flex justify-content-center align-items-center"><b>Employee Management System</b></h2>

@using (Html.BeginForm("Index", "Employee", FormMethod.Post, new { id = "AddEmployeeForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h5 class="text-info"> Add Employee Details</h5>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group d-flex flex-row mb-2">
        <label for="EmployeeName" class="control-label col-md-2 fw-normal fs-4">
            Employee Name<span class="red-asterisk">*</span>:
        </label>
        <div class="col-md-10">
            @Html.EditorFor(model => model.EmployeeName, new
            {
                htmlAttributes = new
                {
                    @class = "form-control border border-1 border-dark",
           required = "required",
           id = "EmployeeName",
           placeholder="Enter name"
       }
            })
            @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-group d-flex flex-row mb-2">
            <label for="EmployeeCode" class="control-label col-md-2 fw-normal fs-4">
                Employee Code<span class="red-asterisk">*</span>:
            </label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeCode, new
           {
               htmlAttributes = new
               {
                   @class = "form-control border border-1 border-dark",
                   type = "number",
                   step = "1",
                   id = "EmployeeCode",
                   required = "required",
                   placeholder = "Enter code"
               }
           })
                @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group d-flex flex-row mb-2">
            <label for="EmployeeMailID" class="control-label col-md-2 fw-normal fs-4">
                Email ID<span class="red-asterisk">*</span>:
            </label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.MailID, new
           {
               htmlAttributes = new
               {
                   @class = "form-control border border-1 border-dark",
                   type = "email",
                   id = "Email",
                   placeholder="Enter mail",
                   required = "required"
               }
           })
                @Html.ValidationMessageFor(model => model.MailID, "", new { @class = "text-danger" })
                <label id="emailError" style="color: red; display: none;">Invalid Email Format</label>

            </div>
        </div>

        <div class="form-group d-flex flex-row mb-2">
            @Html.LabelFor(model => model.ContactNumber, "Mobile Number: ", htmlAttributes: new { @class = "control-label col-md-2 fw-normal fs-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNumber, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control border border-1 border-dark",
               type = "number",
                        step = "1",
               id = "ContactNumber",
               placeholder = "Enter contact details"
           }
                })
                @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group d-flex flex-row mb-2">
            @Html.LabelFor(model => model.Gender, "Gender: ", htmlAttributes: new { @class = "control-label col-md-2 fw-normal fs-4" })
            <div class="col-md-10">
                @Html.DropDownList("Gender", new List<SelectListItem>
                         {
                             new SelectListItem{Text = "Male", Value = "Male"},
                             new SelectListItem{Text = "Female", Value="Female"}
                         },
                         "Select Gender", new { @class = "from-control border border-1 border-dark dropdown-custom" } 
                         )
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10 my-4">
                <button type="button" id="submitBtn" class="btn btn-primary col-md-2 mr-4">Save</button>
                <button type="button" id="resetBtn" class="btn btn-primary col-md-2 mx-5">Reset</button>
            </div>
        </div>
    </div>
}

@Html.Partial("_MessageHandler") @section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
<script>
    $(document).ready(function () {
        $('#submitBtn').prop('disabled', true);

        $('#submitBtn').on('click', function () {
            $.ajax({
                url: $('#AddEmployeeForm').attr('action'),
                type: 'POST',
                data: $('#AddEmployeeForm').serialize(),
                success: function (response) {
                    var IsError = response.IsError;
                    var messageText = response.Message;

                    if (IsError) {
                        console.log('Error occurred:', messageText);
                    } else {
                        console.log('Success:', messageText);
                    }
                    displayModal(IsError, messageText);
                    $('#AddEmployeeForm')[0].reset();
                    $('#submitBtn').prop('disabled', true);
                }
            });
        });
        $('#resetBtn').on('click', function (e) {
            $('#AddEmployeeForm')[0].reset();
            $('#emailError').hide();
        });

        $('#ContactNumber').on('input', function () {
            var contactNumber = $(this).val().replace(/[^0-9]/g, '').slice(0, 10); // number will have 10 digits
            $(this).val(contactNumber);
        });
        $('#EmployeeName').on('input', function () {
            handleSubmitResetBtn();
        });
        $('#EmployeeCode').on('input', function () {
            var empCode = $(this).val().replace(/[^0-9]/g, '').slice(0, 6); // emp code should have 3-6 digits
            $(this).val(empCode);
            handleSubmitResetBtn();
        });

        var isEmailFieldBlurred = false;
        var emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;

        $('#Email').on('blur', function () {
            isEmailFieldBlurred = true;
            validateEmail();
        });

        $('#Email').on('input', function () {
            if (isEmailFieldBlurred) {
                validateEmail();
            }
        });

        function validateEmail() {
            var email = $('#Email').val();
            handleSubmitResetBtn();
            if (!emailRegex.test(email)) {
                $('#emailError').show();
            } else {
                $('#emailError').hide();
            }
        }
        function handleSubmitResetBtn() {
            var emailValue = $('#Email').val();
            var empcodeValue = $('#EmployeeCode').val();
            var empNameValue = $('#EmployeeName').val();

            if (emailValue === '' || empcodeValue === '' || empNameValue === '') {
                $('#submitBtn').prop('disabled', true);
            } else {
                $('#submitBtn').prop('disabled', false);
            }
        }

        function displayModal(IsError, messageText) {
            var status = IsError ? "Error" : "Information";
            $("#message-popup .modal-title").html(status);
            if (IsError) {
                $("#message-popup .modal-body").html(messageText);
            } else {
                $("#message-popup .modal-body").html(messageText);
            }
            $("#message-popup").modal("show");
        }

    });
    </script>
}

